{"version":3,"sources":["component/BlocklyWorkspace.tsx","blockly/block/Test.ts","redux/slice.ts","component/MainSideBar.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["BlocklyWorkspace","blocklyDivRef","React","createRef","workspace","this","current","hasChildNodes","Blockly","inject","toolbox","toolboxJson","className","hidden","props","ref","Component","defineBlocksWithJsonArray","tabSlice","createSlice","name","initialState","value","reducers","setTabValue","state","action","payload","actions","useStyles","makeStyles","theme","createStyles","root","borderRight","palette","divider","height","justifyContent","display","flexDirection","tab","background","hover","minWidth","socialmedia_icon","width","textAlign","padding","color","text","primary","socailmedias","marginBottom","SocialMedia","classes","Link","href","icon","MainSideBar","useSelector","dispatch","useDispatch","Tabs","indicatorColor","textColor","onChange","event","orientation","Tab","label","Extension","Description","GitHub","fontSize","Twitter","App","store","configureStore","reducer","tabReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cda62b3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./BlocklyWorkspace.css\";\nimport toolboxJson from \"../resource/test.json\"\nimport Blockly, {WorkspaceSvg} from \"blockly\";\n\ninterface Props {\n    hidden: boolean\n}\n\nclass BlocklyWorkspace extends React.Component<Props> {\n\n    private blocklyDivRef: React.RefObject<HTMLDivElement> = React.createRef();\n    public workspace: WorkspaceSvg | undefined;\n\n    componentDidMount() {\n\n        if (this.blocklyDivRef.current === null) {\n            return;\n        }\n\n        if (this.blocklyDivRef.current.hasChildNodes()) {\n            return;\n        }\n\n        this.workspace = Blockly.inject(this.blocklyDivRef.current, {\n            toolbox: toolboxJson,\n        });\n\n    }\n\n    render() {\n\n        return (\n            <div className=\"workspace\" hidden={this.props.hidden} >\n                <div ref={this.blocklyDivRef} className=\"blocklyDiv\" />\n            </div>\n        );\n    }\n}\n\nexport default BlocklyWorkspace;","import Blockly from 'blockly';\n\nBlockly.defineBlocksWithJsonArray([\n    {\n        \"type\": \"test\",\n        \"lastDummyAlign0\": \"RIGHT\",\n        \"message0\": \"a %1 b\",\n        \"args0\": [\n            {\n                \"type\": \"input_value\",\n                \"name\": \"NAME\",\n                \"check\": \"Player\"\n            }\n        ],\n        \"colour\": 230,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    },\n    {\n        \"type\": \"event_player\",\n        \"message0\": \"参加したプレイヤー\",\n        \"output\": \"Player\",\n        \"colour\": 100,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    },\n    {\n        \"type\": \"sendmessage\",\n        \"message0\": \"%1 に %2 とメッセージを送る\",\n        \"args0\": [\n            {\n                \"type\": \"input_value\",\n                \"name\": \"player\",\n                \"check\": \"Player\"\n            },\n            {\n                \"type\": \"input_value\",\n                \"name\": \"text\",\n                \"check\": \"String\"\n            }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"colour\": 230,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    }\n]);","import { createSlice } from '@reduxjs/toolkit'\n\nexport const tabSlice = createSlice({\n    name: 'tab',\n    initialState: {\n        value: 0,\n    },\n    reducers: {\n        setTabValue: (state, action) => {\n            state.value = action.payload;\n        }\n    },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setTabValue } = tabSlice.actions\n\nexport default tabSlice.reducer","import {Link, Tab, Tabs} from \"@material-ui/core\";\nimport {Description, Extension, GitHub, Twitter} from \"@material-ui/icons\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setTabValue} from \"../redux/slice\";\nimport {AppDispatch, RootState} from \"../redux/store\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            borderRight: `1px solid ${theme.palette.divider}`,\n            height: \"100vh\",\n            justifyContent: \"space-between\",\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        tab: {\n            \"&:hover\": {\n                background: theme.palette.action.hover\n            },\n            minWidth: \"120px\"\n        },\n        socialmedia_icon: {\n            width: \"100%\",\n            textAlign: \"center\",\n            padding: \"20px 0px\",\n            \"&:hover\": {\n                color: theme.palette.text.primary\n            }\n        },\n        socailmedias: {\n            marginBottom: \"10px\"\n        }\n    }),\n);\n\ninterface SocialMediaProps {\n    href: string,\n    icon: string | React.ReactElement;\n}\n\nfunction SocialMedia(props: SocialMediaProps) {\n    \n    const classes = useStyles();\n    \n    return (\n        <Link href={props.href} color=\"textSecondary\">\n            <div className={classes.socialmedia_icon}>\n                {props.icon}\n            </div>\n        </Link>\n    )\n}\n\nfunction MainSideBar() {\n\n    const classes = useStyles();\n\n    const value = useSelector<RootState>((state) => state.tab.value)\n    const dispatch = useDispatch<AppDispatch>();\n\n    return (\n        <div className={classes.root}>\n            <Tabs\n                value={value}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(event, value) => dispatch(setTabValue(value))}\n                orientation=\"vertical\"\n            >\n                <Tab label=\"Block\" icon={<Extension/>} className={classes.tab}/>\n                <Tab label=\"Code\" icon={<Description/>} className={classes.tab}/>\n            </Tabs>\n            <div className={classes.socailmedias}>\n                <SocialMedia href=\"https://github.com/\" icon={<GitHub fontSize=\"large\"/>}/>\n                <SocialMedia href=\"https://twitter.com/\" icon={<Twitter fontSize=\"large\"/>}/>\n            </div>\n        </div>\n    );\n}\n\nexport default MainSideBar;","import React from 'react';\nimport BlocklyWorkspace from \"./component/BlocklyWorkspace\";\nimport \"./blockly/block/Test\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport MainSideBar from \"./component/MainSideBar\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"./redux/store\";\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: \"flex\"\n        }\n    }),\n);\n\nfunction App() {\n\n    const value = useSelector<RootState>((state) => state.tab.value)\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <MainSideBar/>\n            <BlocklyWorkspace hidden={value !== 0}/>\n        </div>\n    );\n}\n\nexport default App;\n","import {configureStore} from \"@reduxjs/toolkit\";\nimport tabReducer from \"./slice\";\n\nexport const store = configureStore({\n    reducer: {\n        tab: tabReducer,\n    },\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}