{"version":3,"sources":["blockly/generator/generator.ts","redux/workspace/slice.ts","component/BlocklyWorkspace.tsx","blockly/block/test.ts","blockly/block/player.ts","redux/tab/slice.ts","component/MainSideBar.tsx","component/Code.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["spigotGenerator","Generator","block","getFieldValue","gamemode","valueToCode","scrub_","code","opt_thisOnly","nextBlock","nextConnection","targetBlock","nextCode","blockToCode","workspaceSlice","createSlice","name","initialState","reducers","generate","state","workspaceToCode","workspace","setWorkspace","action","payload","actions","BlocklyWorkspace","props","blocklyDivRef","React","createRef","dispatch","useDispatch","useEffect","current","hasChildNodes","Blockly","inject","toolbox","toolboxJson","className","hidden","ref","defineBlocksWithJsonArray","tabSlice","value","setTabValue","useStyles","makeStyles","theme","createStyles","root","borderRight","palette","divider","height","justifyContent","display","flexDirection","tab","background","hover","minWidth","socialmedia_icon","width","textAlign","padding","color","text","primary","socailmedias","marginBottom","SocialMedia","classes","Link","href","target","rel","icon","MainSideBar","useSelector","Tabs","indicatorColor","textColor","onChange","event","orientation","Tab","label","Extension","Description","onClick","GitHub","fontSize","Twitter","marginLeft","spacing","maxHeight","default","buttons","secondary","marginTop","codeContent","borderRadius","Code","Tooltip","title","IconButton","aria-label","FileCopy","clsx","App","store","configureStore","reducer","tabReducer","workspaceReducer","middleware","getDefaultMiddleware","serializableCheck","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.995cf0dc.chunk.js","sourcesContent":["import {Generator} from \"blockly\";\n\nexport const spigotGenerator: any = new Generator(\"spigot-api\");\n\nspigotGenerator[\"get_player\"] = function(block: any) {\n    const text_mcid = block.getFieldValue('mcid');\n    const code = \"Bukkit.getPlayer(\\\"\"+ text_mcid +\"\\\")\";\n    return [code, 0];\n}\n\nspigotGenerator[\"text\"] = function(block: any) {\n    let code = block.getFieldValue('TEXT');\n    return [\"\\\"\" + code + \"\\\"\", 0];\n};\n\nspigotGenerator[\"set_gamemode\"] = function(block: any) {\n    const gamemode = block.getFieldValue('gamemode');\n    const player = spigotGenerator.valueToCode(block, \"player\", 0);\n    let code = player + \".setGameMode(GameMode.\" + gamemode + \");\";\n    return code;\n};\n\nspigotGenerator[\"sendmessage\"] = function(block: any) {\n    const player = spigotGenerator.valueToCode(block, \"player\", 0);\n    const text = spigotGenerator.valueToCode(block, \"text\", 0);\n    let code = player + \".sendMessage(\" + text + \");\";\n    return code;\n};\n\nspigotGenerator.scrub_ = function(block: any, code: string, opt_thisOnly: any) {\n    const nextBlock =\n        block.nextConnection && block.nextConnection.targetBlock();\n    let nextCode = '';\n    if (nextBlock) {\n        nextCode =\n            opt_thisOnly ? '' : '\\n' + spigotGenerator.blockToCode(nextBlock);\n    }\n    return code + nextCode;\n};\n","import {createSlice} from '@reduxjs/toolkit'\nimport {spigotGenerator} from \"../../blockly/generator/generator\";\nimport {WorkspaceSvg} from \"blockly\";\n\ninterface state {\n    workspace?: WorkspaceSvg,\n    code: string\n}\n\nconst initialState: state = {\n    code: \"\"\n}\n\nexport const workspaceSlice = createSlice({\n    name: 'workspace',\n    initialState,\n    reducers: {\n        generate: (state) => {\n            state.code = spigotGenerator.workspaceToCode(state.workspace);\n        },\n        setWorkspace: (state, action) => {\n            state.workspace = action.payload;\n        }\n    },\n})\n\n// Action creators are generated for each case reducer function\nexport const { generate, setWorkspace} = workspaceSlice.actions\n\nexport default workspaceSlice.reducer","import React, {useEffect} from \"react\";\nimport \"./BlocklyWorkspace.css\";\nimport toolboxJson from \"../resource/test.json\"\nimport Blockly from \"blockly\";\nimport {useDispatch} from \"react-redux\";\nimport {AppDispatch} from \"../redux/store\";\nimport {setWorkspace} from \"../redux/workspace/slice\";\n\ninterface Props {\n    hidden: boolean\n}\n\nfunction BlocklyWorkspace(props: Props) {\n\n    const blocklyDivRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    useEffect(() => {\n\n        if (blocklyDivRef.current === null) {\n            return;\n        }\n\n        if (blocklyDivRef.current.hasChildNodes()) {\n            return;\n        }\n\n        const workspace = Blockly.inject(blocklyDivRef.current, {\n            toolbox: toolboxJson,\n        });\n\n        dispatch(setWorkspace(workspace))\n\n    })\n\n    return (\n        <div className=\"workspace\" hidden={props.hidden} >\n            <div ref={blocklyDivRef} className=\"blocklyDiv\" />\n        </div>\n    );\n}\n\nexport default BlocklyWorkspace;","import Blockly from 'blockly';\n\nBlockly.defineBlocksWithJsonArray([\n    {\n        \"type\": \"test\",\n        \"lastDummyAlign0\": \"RIGHT\",\n        \"message0\": \"a %1 b\",\n        \"args0\": [\n            {\n                \"type\": \"input_value\",\n                \"name\": \"NAME\",\n                \"check\": \"Player\"\n            }\n        ],\n        \"colour\": 230,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    },\n    {\n        \"type\": \"event_player\",\n        \"message0\": \"参加したプレイヤー\",\n        \"output\": \"Player\",\n        \"colour\": 100,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    },\n    {\n        \"type\": \"sendmessage\",\n        \"message0\": \"%1 に メッセージ %2 を送る\",\n        \"args0\": [\n            {\n                \"type\": \"input_value\",\n                \"name\": \"player\",\n                \"check\": \"Player\"\n            },\n            {\n                \"type\": \"input_value\",\n                \"name\": \"text\",\n                \"check\": \"String\"\n            }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"colour\": 230,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    }\n]);","import Blockly from 'blockly';\n\nBlockly.defineBlocksWithJsonArray([\n    {\n        \"type\": \"set_gamemode\",\n        \"message0\": \"%1 のゲームモードを %2 に変更する\",\n        \"args0\": [\n            {\n                \"type\": \"input_value\",\n                \"name\": \"player\",\n                \"check\": \"Player\"\n            },\n            {\n                \"type\": \"field_dropdown\",\n                \"name\": \"gamemode\",\n                \"options\": [\n                    [\n                        \"クリエイティブ\",\n                        \"CREATIVE\"\n                    ],\n                    [\n                        \"サバイバル\",\n                        \"SURVIVAL\"\n                    ]\n                ]\n            }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"colour\": 0,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    },\n    {\n        \"type\": \"get_player\",\n        \"message0\": \"mcid: %1\",\n        \"args0\": [\n            {\n                \"type\": \"field_input\",\n                \"name\": \"mcid\",\n                \"text\": \"\"\n            }\n        ],\n        \"output\": \"Player\",\n        \"colour\": 285,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    }\n]);","import {createSlice} from '@reduxjs/toolkit'\n\nexport const tabSlice = createSlice({\n    name: 'tab',\n    initialState: {\n        value: 0,\n    },\n    reducers: {\n        setTabValue: (state, action) => {\n            state.value = action.payload;\n        }\n    },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setTabValue } = tabSlice.actions\n\nexport default tabSlice.reducer","import {Link, Tab, Tabs} from \"@material-ui/core\";\nimport {Description, Extension, GitHub, Twitter} from \"@material-ui/icons\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setTabValue} from \"../redux/tab/slice\";\nimport {AppDispatch, RootState} from \"../redux/store\";\nimport {generate} from \"../redux/workspace/slice\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            borderRight: `1px solid ${theme.palette.divider}`,\n            height: \"100vh\",\n            justifyContent: \"space-between\",\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        tab: {\n            \"&:hover\": {\n                background: theme.palette.action.hover\n            },\n            minWidth: \"120px\"\n        },\n        socialmedia_icon: {\n            width: \"100%\",\n            textAlign: \"center\",\n            padding: \"20px 0px\",\n            \"&:hover\": {\n                color: theme.palette.text.primary\n            }\n        },\n        socailmedias: {\n            marginBottom: \"10px\"\n        }\n    }),\n);\n\ninterface SocialMediaProps {\n    href: string,\n    icon: string | React.ReactElement;\n}\n\nfunction SocialMedia(props: SocialMediaProps) {\n    \n    const classes = useStyles();\n    \n    return (\n        <Link href={props.href} color=\"textSecondary\" target=\"_blank\" rel=\"noopener\">\n            <div className={classes.socialmedia_icon}>\n                {props.icon}\n            </div>\n        </Link>\n    )\n}\n\nfunction MainSideBar() {\n\n    const classes = useStyles();\n\n    const value = useSelector<RootState>((state) => state.tab.value)\n    const dispatch = useDispatch<AppDispatch>();\n\n    return (\n        <div className={classes.root}>\n            <Tabs\n                value={value}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(event, value) => dispatch(setTabValue(value))}\n                orientation=\"vertical\"\n            >\n                <Tab label=\"Block\" icon={<Extension/>} className={classes.tab}/>\n                <Tab label=\"Code\" icon={<Description/>} className={classes.tab} onClick={() => dispatch(generate())}/>\n            </Tabs>\n            <div className={classes.socailmedias}>\n                <SocialMedia href=\"https://github.com/Gorayan/spigot-blockly\" icon={<GitHub fontSize=\"large\"/>}/>\n                <SocialMedia href=\"https://twitter.com/Gorayan_kun\" icon={<Twitter fontSize=\"large\"/>}/>\n            </div>\n        </div>\n    );\n}\n\nexport default MainSideBar;","import {IconButton, Tooltip} from \"@material-ui/core\"\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\nimport Highlight from 'react-highlight'\nimport \"highlight.js/styles/a11y-dark.css\"\nimport clsx from 'clsx';\nimport {FileCopy} from \"@material-ui/icons\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../redux/store\";\n\ninterface Props {\n    hidden: boolean\n}\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        code: {\n            marginLeft: theme.spacing(8),\n            width: \"720px\",\n            maxHeight: \"100vh\",\n        },\n        root: {\n            width: \"calc(100vw - 120px)\",\n            height: \"100vh\",\n            background: theme.palette.background.default\n        },\n        buttons: {\n            display: \"flex\",\n            color: theme.palette.text.secondary,\n            marginTop: theme.spacing(2),\n            flexDirection: \"row-reverse\"\n        },\n        codeContent: {\n            borderRadius: \"4px\"\n        }\n    }),\n);\n\nfunction Code(props: Props) {\n\n    const classes = useStyles();\n\n    const code = useSelector<RootState, string>((state) => state.workspace.code)\n\n    return (\n        <div className={classes.root} hidden={props.hidden}>\n            <div className={classes.code}>\n                <div className={classes.buttons}>\n                    <CopyToClipboard text={code}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton aria-label=\"delete\">\n                                <FileCopy/>\n                            </IconButton>\n                        </Tooltip>\n                    </CopyToClipboard>\n                </div>\n                <Highlight className={clsx(\"java\", classes.codeContent)}>\n                    {code}\n                </Highlight>\n            </div>\n        </div>\n    )\n}\n\nexport default Code;","import React from 'react'\nimport BlocklyWorkspace from \"./component/BlocklyWorkspace\"\nimport \"./blockly/block/test\"\nimport \"./blockly/block/player\"\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\nimport MainSideBar from \"./component/MainSideBar\"\nimport {useSelector} from \"react-redux\"\nimport {RootState} from \"./redux/store\"\nimport Code from \"./component/Code\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: \"flex\"\n        }\n    }),\n);\n\nfunction App() {\n\n    const value = useSelector<RootState>((state) => state.tab.value)\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <MainSideBar/>\n            <BlocklyWorkspace hidden={value !== 0}/>\n            <Code hidden={value !== 1}/>\n        </div>\n    );\n}\n\nexport default App;\n","import {configureStore} from \"@reduxjs/toolkit\";\nimport tabReducer from \"./tab/slice\";\nimport workspaceReducer from \"./workspace/slice\";\n\nexport const store = configureStore({\n    reducer: {\n        tab: tabReducer,\n        workspace: workspaceReducer\n    },\n    middleware: (getDefaultMiddleware => {\n        return getDefaultMiddleware({\n            serializableCheck: false,\n        })\n    })\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}